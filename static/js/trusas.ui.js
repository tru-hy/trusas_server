// Generated by CoffeeScript 1.4.0
(function() {
  var format_time;

  this.trusas_create_ui = function() {
    var $ctrl, container, ctrl, grid_margin, grid_size, initialize_grid, resizeBlock, seekbar, widget_creator, widget_size, wrap_widget;
    grid_size = 140;
    grid_margin = 10;
    widget_creator = function(type, cont, opts) {
      var el, h, html, w, _ref;
      _ref = creators[type](opts), html = _ref[0], w = _ref[1], h = _ref[2];
      el = gridster.add_widget("<li>" + html + "</li>", w, h);
      cont($(el).children()[0]);
      $(el).resizable({
        grid: [grid_size + (grid_margin * 2), grid_size + (grid_margin * 2)],
        animate: false,
        minWidth: grid_size,
        minHeight: grid_size,
        autoHide: true,
        stop: function(event, ui) {
          var resized;
          resized = $(this);
          return setTimeout((function() {
            return resizeBlock(resized);
          }), 300);
        }
      });
      return $(el).find('.ui-resizable-handle').hover(function() {
        return gridster.disable();
      }, function() {
        return gridster.enable();
      });
    };
    container = $(".gridster ul");
    widget_size = function(el) {
      var $el;
      $el = $(el);
      if ($el.is("video")) {
        return [5, 3];
      }
      return [1, 1];
    };
    wrap_widget = function(element, param) {
      var h, w, wrapper, _ref;
      _ref = widget_size(element), w = _ref[0], h = _ref[1];
      wrapper = $("<li data-sizex=\"" + w + "\" data-sizey=\"" + h + "\"></li>").appendTo(container);
      wrapper.data('sizex', w);
      wrapper.data('sizey', h);
      return wrapper.append(element);
    };
    resizeBlock = function(gridster, elmObj) {
      var grid_h, grid_w, h, w;
      elmObj = $(elmObj);
      w = elmObj.width() - grid_size;
      h = elmObj.height() - grid_size;
      grid_w = 1;
      while (w > 0) {
        w -= grid_size + (grid_margin * 2);
        grid_w++;
      }
      grid_h = 1;
      while (h > 0) {
        h -= grid_size + (grid_margin * 2);
        grid_h++;
      }
      return gridster.resize_widget(elmObj, grid_w, grid_h);
    };
    initialize_grid = function() {
      var gridster;
      gridster = container.gridster({
        widget_margins: [grid_margin, grid_margin],
        widget_base_dimensions: [grid_size, grid_size],
        max_size_x: 10
      }).data("gridster");
      container.find(".gs_w").resizable({
        grid: [grid_size + (grid_margin * 2), grid_size + (grid_margin * 2)],
        animate: false,
        minWidth: grid_size,
        minHeight: grid_size,
        autoHide: true,
        stop: function(event, ui) {
          var resized;
          resized = $(this);
          return setTimeout((function() {
            return resizeBlock(gridster, resized);
          }), 300);
        }
      });
      return container.find('.ui-resizable-handle').hover(function() {
        return gridster.disable();
      }, function() {
        return gridster.enable();
      });
    };
    ctrl = new_trusas_controller({
      oncreated: wrap_widget,
      complete: initialize_grid
    });
    seekbar = $("#playback_control .seekbar");
    seekbar.slider({
      min: 0,
      max: 0,
      step: 0.1
    }, {
      slide: function(ev, ui) {
        return ctrl.setCurrentTime(ui.value, $("#playback_control .session_date #current").html(format_time(ui.value)));
      },
      change: function(ev, ui) {
        return $("#playback_control .session_date #current").html(format_time(ui.value));
      }
    });
    $ctrl = $(ctrl);
    $ctrl.on("durationchange", function(e) {
      seekbar.slider("option", "max", ctrl.getDuration());
      return $("#playback_control .session_date #total").html(format_time(ctrl.getDuration()));
    });
    $ctrl.on("timeupdate", function(e) {
      return seekbar.slider("value", ctrl.getCurrentTime());
    });
    $("#playback_control .play_toggle").click(function(ev) {
      if (ctrl.isPaused()) {
        ctrl.play();
        return $(this).parent().addClass("active");
      } else {
        ctrl.pause();
        return $(this).parent().removeClass("active");
      }
    });
    return ctrl;
  };

  format_time = function(sec_numb) {
    var hours, minutes, seconds;
    sec_numb = Math.round(sec_numb);
    hours = Math.floor(sec_numb / 3600);
    minutes = Math.floor((sec_numb - (hours * 3600)) / 60);
    seconds = sec_numb - (hours * 3600) - (minutes * 60);
    if (hours < 10) {
      hours = "0" + hours;
    }
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    return hours + ':' + minutes + ':' + seconds;
  };

}).call(this);
