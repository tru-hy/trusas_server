// Generated by CoffeeScript 1.4.0
(function() {
  var VideoWidget, getJsonStream, interp1d, json_stream_to_array, searchsorted, signal_plotter, tp,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  this.trusas_plugins = {};

  tp = this.trusas_plugins;

  tp.defaults = [];

  VideoWidget = (function() {

    VideoWidget.Resource = function(controller, register, param) {
      var resources, timemap_uri, type, uri;
      uri = param.uri, type = param.type;
      if (type._type !== 'video') {
        return;
      }
      if (!resources) {
        resources = 'resources.json';
      }
      if (!(timemap_uri = type.timemap)) {
        return;
      }
      getJsonStream(timemap_uri, function(timemap) {
        var el, widget;
        try {
          widget = new VideoWidget(uri, timemap, {
            type: type
          });
        } catch (e) {
          register(param, WidgetError(VideoWidget, uri, type, e));
          return;
        }
        el = widget.element;
        return register(param, el, {
          calls: {
            play: function() {
              return el.play();
            },
            pause: function() {
              return el.pause();
            },
            getCurrentTime: widget.getCurrentTime,
            setCurrentTime: widget.setCurrentTime,
            getDuration: function() {
              return el.duration;
            },
            getStartTime: widget.getStartTime
          },
          events: {
            timeupdate: el,
            durationchange: el,
            canplay: el
          }
        });
      });
      return true;
    };

    function VideoWidget(uri, timemap, options) {
      var row, sts, ts, _i, _len;
      this.uri = uri;
      this.options = options;
      this.getStartTime = __bind(this.getStartTime, this);

      this.setCurrentTime = __bind(this.setCurrentTime, this);

      this.getCurrentTime = __bind(this.getCurrentTime, this);

      ts = [];
      sts = [];
      for (_i = 0, _len = timemap.length; _i < _len; _i++) {
        row = timemap[_i];
        ts.push(row[0]['ts']);
        sts.push(row[1]['stream_ts']);
      }
      this.stream_to_global = interp1d(sts, ts);
      this.global_to_stream = interp1d(ts, sts);
      this.$element = $("<video preload><source src=\"" + this.uri + "\"></video>");
      this.element = this.$element[0];
    }

    VideoWidget.prototype.getCurrentTime = function() {
      return this.stream_to_global(this.element.currentTime);
    };

    VideoWidget.prototype.setCurrentTime = function(ts) {
      return this.element.currentTime = this.global_to_stream(ts);
    };

    VideoWidget.prototype.getStartTime = function() {
      return this.stream_to_global(0.0);
    };

    return VideoWidget;

  }).call(this);

  tp.video = VideoWidget.Resource;

  tp.defaults.push(tp.video);

  signal_plotter = function(opts) {
    var handler;
    return handler = function(ctrl, register, param) {
      var type, uri;
      uri = param.uri, type = param.type;
      if (!opts.typefilter(type)) {
        return;
      }
      getJsonStream(uri, function(data) {
        var d, el, graph, row, transform, _i, _len, _ref, _ref1, _ref2;
        transform = (_ref = opt.transform) != null ? _ref : function(y) {
          return y;
        };
        d = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          row = data[_i];
          d.push({
            x: Â row[0].ts,
            y: transform(row[1][opt.field])
          });
        }
        el = $("<div class=\"trusas-signal\"></div>");
        graph = new Rickshaw.Graph({
          element: el,
          series: [
            {
              color: (_ref1 = opts.color) != null ? _ref1 : 'steelblue',
              data: d
            }
          ],
          renderer: (_ref2 = opts.renderer) != null ? _ref2 : 'renderer'
        });
        return register(param, el);
      });
      return true;
    };
  };

  json_stream_to_array = function(stream) {
    var json, line, _i, _len, _ref;
    json = [];
    _ref = stream.split('\n');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i];
      if (line.trim() === '') {
        continue;
      }
      json.push($.parseJSON(line));
    }
    return json;
  };

  getJsonStream = function(uri, success, opts) {
    if (opts == null) {
      opts = {};
    }
    opts.success = function() {
      var args, data;
      data = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return success.apply(null, [json_stream_to_array(data)].concat(__slice.call(args)));
    };
    return $.ajax(uri, opts);
  };

  searchsorted = function(needle, haystack, base) {
    var len, mid_i, mid_val;
    if (base == null) {
      base = 0;
    }
    len = haystack.length;
    if (len <= 1) {
      return base;
    }
    mid_i = Math.floor(len / 2);
    mid_val = haystack[mid_i];
    if (needle < mid_val) {
      return searchsorted(needle, haystack.slice(0, +(mid_i - 1) + 1 || 9e9), base);
    }
    return searchsorted(needle, haystack.slice(mid_i), mid_i + base);
  };

  interp1d = function(x, y) {
    var interp;
    interp = function(new_x) {
      var prev_i, ratio;
      prev_i = searchsorted(new_x, x);
      ratio = (new_x - x[prev_i]) / (x[prev_i + 1] - x[prev_i]);
      return y[prev_i] * (1 - ratio) + y[prev_i + 1] * ratio;
    };
    return interp;
  };

}).call(this);
