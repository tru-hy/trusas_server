// Generated by CoffeeScript 1.4.0
(function() {
  var Controllee, TrusasController, WidgetError, mime_parse,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  this.new_trusas_controller = function(opts) {
    var complete, ctrl, error, handlers, load_handlers, loader, oncreated, resources, success,
      _this = this;
    success = opts.success, error = opts.error, complete = opts.complete, resources = opts.resources, oncreated = opts.oncreated, handlers = opts.handlers;
    if (handlers == null) {
      handlers = this.trusas_plugins.defaults;
    }
    ctrl = new TrusasController();
    if (!resources) {
      resources = 'resources.json';
    }
    load_handlers = function(complete, resources, oncreated) {
      var completion_notified, handler, handlers_notified, loaded, loading, notify_if_complete, on_load_complete, param, register, type, uri, _i, _len;
      loading = [];
      loaded = [];
      handlers_notified = false;
      completion_notified = false;
      on_load_complete = function() {
        if (complete) {
          complete();
        }
        return ctrl._baseTime = ctrl._firstTime;
      };
      notify_if_complete = function() {
        var target, _i, _len;
        if (completion_notified) {
          return;
        }
        if (!handlers_notified) {
          return;
        }
        for (_i = 0, _len = loading.length; _i < _len; _i++) {
          target = loading[_i];
          if (__indexOf.call(loaded, target) < 0) {
            return;
          }
        }
        completion_notified = true;
        return on_load_complete();
      };
      register = function(param, element, _arg) {
        var calls, events, _ref;
        _ref = _arg != null ? _arg : {}, calls = _ref.calls, events = _ref.events;
        loaded.push(param);
        if (oncreated && element) {
          oncreated(element, param);
        }
        if (calls || events) {
          ctrl.add_controllee(calls != null ? calls : {}, events != null ? events : {});
        }
        return notify_if_complete();
      };
      for (uri in resources) {
        type = mime_parse(resources[uri]);
        for (_i = 0, _len = handlers.length; _i < _len; _i++) {
          handler = handlers[_i];
          param = {
            uri: uri,
            type: type,
            handler: handler
          };
          if (handler(ctrl, register, param)) {
            loading.push(param);
          }
        }
      }
      handlers_notified = true;
      return notify_if_complete();
    };
    loader = function(resources) {
      return load_handlers(complete, resources, oncreated);
    };
    if (typeof resources === 'string') {
      $.getJSON(resources, loader);
    } else {
      loader(resources);
    }
    return ctrl;
  };

  TrusasController = (function() {

    function TrusasController() {
      this.isPaused = __bind(this.isPaused, this);

      this.getDuration = __bind(this.getDuration, this);

      this.getCurrentTime = __bind(this.getCurrentTime, this);

      this.setCurrentTime = __bind(this.setCurrentTime, this);

      this.pause = __bind(this.pause, this);

      this.play = __bind(this.play, this);

      this.add_controllee = __bind(this.add_controllee, this);
      this._controllees = [];
      this._canplay = [];
      this._playing = false;
      this._currentTime = void 0;
      this._firstTime = void 0;
      this._lastTime = void 0;
    }

    TrusasController.prototype.add_controllee = function(calls, events) {
      var c, e, s,
        _this = this;
      c = new Controllee(calls, events);
      s = c.getStartTime();
      e = s + c.getDuration();
      if (!(s > this._firstTime)) {
        this._firstTime = s;
      }
      if (!(e < this._lastTime)) {
        this._lastTime = e;
      }
      $(c).bind("durationchange", function() {
        e = c.getStartTime() + c.getDuration();
        if (!(e <= _this._lastTime)) {
          _this._lastTime = e;
        }
        return $(_this).trigger("durationchange");
      });
      $(c).on("timeupdate", function() {
        var t;
        t = c.getCurrentTime();
        if (_this._currentTime > t) {
          return;
        }
        _this._currentTime = t;
        return $(_this).trigger("timeupdate");
      });
      return this._controllees.push(c);
    };

    TrusasController.prototype.play = function() {
      var c, _i, _len, _ref, _results;
      this._playing = true;
      _ref = this._controllees;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        _results.push(c != null ? c.play() : void 0);
      }
      return _results;
    };

    TrusasController.prototype.pause = function(e) {
      var c, _i, _len, _ref, _results;
      this._playing = false;
      _ref = this._controllees;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        _results.push(c != null ? c.pause() : void 0);
      }
      return _results;
    };

    TrusasController.prototype.setCurrentTime = function(ts) {
      var c, _i, _len, _ref, _results;
      ts += this._firstTime;
      if (isNaN(ts)) {
        return;
      }
      _ref = this._controllees;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        _results.push(c != null ? c.setCurrentTime(ts) : void 0);
      }
      return _results;
    };

    TrusasController.prototype.getCurrentTime = function() {
      var t;
      t = this._currentTime - this._firstTime;
      if (isNaN(t)) {
        return 0.0;
      }
      return t;
    };

    TrusasController.prototype.getDuration = function() {
      var d;
      d = this._lastTime - this._firstTime;
      if (isNaN(d)) {
        return 0.0;
      }
      return d;
    };

    TrusasController.prototype.isPaused = function() {
      return !this._playing;
    };

    return TrusasController;

  })();

  Controllee = (function() {

    function Controllee(calls, events) {
      var $this, name, src, srcevent, _ref,
        _this = this;
      for (name in calls) {
        this[name] = calls[name];
      }
      $this = $(this);
      $this.eventmap = {};
      for (name in events) {
        src = events[name];
        if (src instanceof Array) {
          _ref = src, src = _ref[0], srcevent = _ref[1];
        } else {
          srcevent = name;
        }
        $this.eventmap[srcevent] = name;
        $(src).on(srcevent, function(ev) {
          var event;
          event = $this.eventmap[ev.type];
          return $this.trigger(event);
        });
      }
    }

    return Controllee;

  })();

  WidgetError = (function(_super) {

    __extends(WidgetError, _super);

    function WidgetError(origin, uri, type, reason) {
      this.origin = origin;
      this.uri = uri;
      this.type = type;
      this.reason = reason;
      WidgetError.__super__.constructor.apply(this, arguments);
    }

    return WidgetError;

  })(Error);

  mime_parse = function(mime) {
    var name, opt, opts, r, type, v, value, _i, _len, _ref, _ref1, _ref2;
    _ref = mime.split(';'), type = _ref[0], opts = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
    r = {};
    for (_i = 0, _len = opts.length; _i < _len; _i++) {
      opt = opts[_i];
      _ref1 = opt.split('=', 2), name = _ref1[0], value = _ref1[1];
    }
    if (name) {
      r[name.trim()] = value;
    }
    _ref2 = (function() {
      var _j, _len1, _ref2, _results;
      _ref2 = type.split('/', 2);
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        v = _ref2[_j];
        _results.push(v.trim());
      }
      return _results;
    })(), r._type = _ref2[0], r._subtype = _ref2[1];
    return r;
  };

}).call(this);
